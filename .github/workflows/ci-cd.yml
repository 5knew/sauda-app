name: Sauda-DB CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Позволяет запускать вручную

env:
  MAVEN_OPTS: -Xmx1024m
  SPRING_PROFILES_ACTIVE: test

jobs:
  # Этап 1: Проверка кода и сборка
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: postgres
          POSTGRES_DB: sauda_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 💾 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 🔍 Validate code quality
      run: |
        echo "Checking code style and quality..."
        echo "Code quality checks temporarily disabled for demo"
        # ./mvnw checkstyle:check
        # ./mvnw spotbugs:check
    
    - name: 🧪 Run tests
      run: ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/sauda_db_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: secret
        SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost:8081/realms/sauda-realm
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🧪 Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: 📦 Build application
      run: ./mvnw clean package -DskipTests
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sauda-app-jar
        path: target/*.jar
        retention-days: 7

  # Этап 2: Анализ безопасности
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 🔒 Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'sauda-app'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
        failOnCVSS: 7
    
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/
        retention-days: 30

  # Этап 3: Сборка Docker образа
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          sauda-app:latest
          sauda-app:${{ github.sha }}
          sauda-app:${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Этап 4: Деплой в тестовую среду
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Image: sauda-app:${{ github.sha }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        # Здесь будет реальная команда деплоя
        # Например: kubectl apply или docker-compose up
    
    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # Здесь будут тесты для проверки работоспособности

  # Этап 5: Деплой в продакшен (только после ручного подтверждения)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📦 Image: sauda-app:${{ github.sha }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        # Здесь будет реальная команда деплоя в продакшен
    
    - name: 📊 Notify team
      run: |
        echo "📊 Notifying team about successful deployment..."
        # Здесь будет отправка уведомлений в Slack/Telegram
