name: 🚀 Sauda-DB CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Позволяет запускать вручную

permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

env:
  MAVEN_OPTS: -Xmx1024m
  SPRING_PROFILES_ACTIVE: test
  # Настройки для инструментов качества кода
  CHECKSTYLE_CONFIG: google_checks.xml
  SPOTBUGS_EFFORT: Max
  JACOCO_VERSION: 0.8.11
  # Maven command (will be set dynamically)
  MAVEN_CMD: ./mvnw

jobs:
  # Этап 1: Проверка кода, тестирование и сборка
  # Включает: Checkstyle, SpotBugs, JaCoCo, Unit Tests, Build
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: postgres
          POSTGRES_DB: sauda_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set Maven Wrapper permissions
      run: |
        if [ -f "./mvnw" ]; then
          chmod +x ./mvnw
          echo "✅ Maven Wrapper permissions set"
        else
          echo "❌ Maven Wrapper not found, will use system Maven"
        fi
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 📦 Install Maven (fallback)
      run: |
        if ! command -v mvn &> /dev/null; then
          echo "Installing Maven as fallback..."
          sudo apt-get update
          sudo apt-get install -y maven
        else
          echo "✅ Maven already available"
        fi
    
    - name: 🔍 Determine Maven command
      run: |
        if [ -f "./mvnw" ] && [ -x "./mvnw" ]; then
          echo "MAVEN_CMD=./mvnw" >> $GITHUB_ENV
          echo "✅ Using Maven Wrapper"
        elif command -v mvn &> /dev/null; then
          echo "MAVEN_CMD=mvn" >> $GITHUB_ENV
          echo "✅ Using system Maven"
        else
          echo "❌ No Maven found!"
          exit 1
        fi
    
    - name: 💾 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 💾 Cache OWASP Database
      uses: actions/cache@v4
      with:
        path: target/dependency-check-data
        key: ${{ runner.os }}-owasp-db-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-owasp-db
    
    - name: 🔍 Checkstyle Code Style Analysis
      run: |
        echo "🔍 Running Checkstyle analysis..."
        ${{ env.MAVEN_CMD }} checkstyle:check
      continue-on-error: true
    
    - name: 📊 Display Checkstyle Results
      if: always()
      run: |
        echo "🔍 Checkstyle Results Summary:"
        if [ -f "target/checkstyle/checkstyle-report.xml" ]; then
          echo "✅ Checkstyle report found"
          echo "📊 Report size: $(du -h target/checkstyle/checkstyle-report.xml | cut -f1)"
          echo "📋 Violations count:"
          grep -c "error\|warning" target/checkstyle/checkstyle-report.xml || echo "No violations found"
        else
          echo "❌ No Checkstyle report found"
        fi
    
    - name: 🐛 SpotBugs Bug Detection
      run: |
        echo "🐛 Running SpotBugs analysis..."
        ${{ env.MAVEN_CMD }} spotbugs:check
      continue-on-error: true
    
    - name: 📊 Display SpotBugs Results
      if: always()
      run: |
        echo "🐛 SpotBugs Results Summary:"
        if [ -f "target/spotbugs.xml" ]; then
          echo "✅ SpotBugs report found"
          echo "📊 Report size: $(du -h target/spotbugs.xml | cut -f1)"
          echo "📋 Bug instances count:"
          grep -c "BugInstance" target/spotbugs.xml || echo "No bugs found"
        else
          echo "❌ No SpotBugs report found"
        fi
    
    - name: 🧪 Run Tests with JaCoCo Coverage
      run: |
        echo "🧪 Running tests with code coverage..."
        ${{ env.MAVEN_CMD }} clean test jacoco:report
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/sauda_db_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: secret
        SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost:8081/realms/sauda-realm
    
    - name: 📊 Display Test Results
      if: always()
      run: |
        echo "🧪 Maven Tests Summary:"
        if [ -d "target/surefire-reports" ]; then
          echo "✅ Test reports found in target/surefire-reports/"
          echo "📊 Test files:"
          ls -la target/surefire-reports/
          echo "📋 Test results:"
          find target/surefire-reports -name "*.xml" -exec echo "=== {} ===" \; -exec head -10 {} \;
        else
          echo "❌ No test reports found"
        fi
    
    
    - name: 📈 Generate JaCoCo Coverage Report
      run: |
        echo "📈 Generating JaCoCo coverage report..."
        ${{ env.MAVEN_CMD }} jacoco:report
      continue-on-error: true
    
    - name: 📊 Display JaCoCo Coverage Results
      if: always()
      run: |
        echo "📈 JaCoCo Coverage Summary:"
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ JaCoCo report found"
          echo "📊 Report size: $(du -h target/site/jacoco/jacoco.xml | cut -f1)"
          echo "📋 Coverage metrics:"
          grep -E "(line-rate|branch-rate|complexity-rate)" target/site/jacoco/jacoco.xml | head -5
        else
          echo "❌ No JaCoCo report found"
        fi
    
    - name: 📦 Build Application
      run: ${{ env.MAVEN_CMD }} clean package -DskipTests
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sauda-app-jar
        path: target/*.jar
        retention-days: 7
    
    - name: 📊 Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          target/checkstyle/checkstyle-report.xml
          target/spotbugs.xml
          target/spotbugsXml.xml
          target/site/jacoco/
          target/surefire-reports/
        retention-days: 30
    
    - name: 📈 Upload JaCoCo Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-coverage
        path: target/site/jacoco/
        retention-days: 30

  # Этап 2: Детальный анализ качества кода
  # Отображает отчеты Checkstyle, SpotBugs и JaCoCo в логах
  code-quality-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download Quality Reports
      uses: actions/download-artifact@v4
      with:
        name: quality-reports
        path: reports/
    
    - name: 📊 Display All Quality Reports
      if: always()
      run: |
        echo "📊 Quality Reports Summary:"
        echo "================================"
        
        # Checkstyle Results
        echo "🔍 Checkstyle Results:"
        if [ -f "reports/checkstyle-report.xml" ]; then
          echo "✅ Checkstyle report found"
          echo "📊 Report size: $(du -h reports/checkstyle-report.xml | cut -f1)"
          echo "📋 Violations count:"
          grep -c "error\|warning" reports/checkstyle-report.xml || echo "No violations found"
        else
          echo "❌ No Checkstyle report found"
        fi
        
        echo ""
        echo "🐛 SpotBugs Results:"
        if [ -f "reports/spotbugs.xml" ]; then
          echo "✅ SpotBugs report found"
          echo "📊 Report size: $(du -h reports/spotbugs.xml | cut -f1)"
          echo "📋 Bug instances count:"
          grep -c "BugInstance" reports/spotbugs.xml || echo "No bugs found"
        else
          echo "❌ No SpotBugs report found"
        fi
        
        echo ""
        echo "📈 JaCoCo Coverage:"
        if [ -f "reports/jacoco/jacoco.xml" ]; then
          echo "✅ JaCoCo report found"
          echo "📊 Report size: $(du -h reports/jacoco/jacoco.xml | cut -f1)"
          echo "📋 Coverage metrics:"
          grep -E "(line-rate|branch-rate|complexity-rate)" reports/jacoco/jacoco.xml | head -5
        else
          echo "❌ No JaCoCo report found"
        fi
        
        echo ""
        echo "🧪 Test Results:"
        if [ -d "reports/surefire-reports" ]; then
          echo "✅ Test reports found"
          echo "📊 Test files:"
          ls -la reports/surefire-reports/
        else
          echo "❌ No test reports found"
        fi

  # Этап 3: Анализ безопасности
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 🔧 Set Maven Wrapper permissions
      run: |
        if [ -f "./mvnw" ]; then
          chmod +x ./mvnw
          echo "✅ Maven Wrapper permissions set"
        else
          echo "❌ Maven Wrapper not found, will use system Maven"
        fi
    
    - name: 💾 Cache OWASP Database
      uses: actions/cache@v4
      with:
        path: target/dependency-check-data
        key: ${{ runner.os }}-owasp-db-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-owasp-db
    
    - name: 📦 Install Maven (fallback)
      run: |
        if ! command -v mvn &> /dev/null; then
          echo "Installing Maven as fallback..."
          sudo apt-get update
          sudo apt-get install -y maven
        else
          echo "✅ Maven already available"
        fi
    
    - name: 🔍 Determine Maven command
      run: |
        if [ -f "./mvnw" ] && [ -x "./mvnw" ]; then
          echo "MAVEN_CMD=./mvnw" >> $GITHUB_ENV
          echo "✅ Using Maven Wrapper"
        elif command -v mvn &> /dev/null; then
          echo "MAVEN_CMD=mvn" >> $GITHUB_ENV
          echo "✅ Using system Maven"
        else
          echo "❌ No Maven found!"
          exit 1
        fi
    
    - name: 🔒 Run OWASP Dependency Check with Maven
      run: |
        echo "🔒 Running OWASP Dependency Check with Maven..."
        echo "📋 Note: Using --noupdate to avoid NVD API issues"
        
        # Попробуем сначала с обновлением базы данных
        echo "🔄 Attempting to update vulnerability database..."
        ${{ env.MAVEN_CMD }} org.owasp:dependency-check-maven:8.4.0:update-only \
          -DnvdApiKey=${{ secrets.NVD_API_KEY }} || echo "⚠️ Database update failed, will use cached data"
        
        # Запускаем проверку с отключенным обновлением
        echo "🔍 Running dependency check..."
        ${{ env.MAVEN_CMD }} org.owasp:dependency-check-maven:8.4.0:check \
          -Dformat=HTML \
          -Dformat=XML \
          -DoutputDirectory=target/reports \
          -DenableRetired=true \
          -DenableExperimental=true \
          -DfailOnCVSS=7 \
          -Dnoupdate=true \
          -DautoUpdate=false || echo "⚠️ OWASP scan completed with warnings (NVD API may be unavailable)"
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
    
    - name: 📊 Display Security Scan Results
      if: always()
      run: |
        echo "🔒 OWASP Dependency Check Results:"
        echo "=================================="
        if [ -d "target/reports" ]; then
          echo "✅ Security reports found"
          echo "📊 Report files:"
          ls -la target/reports/
          if [ -f "target/reports/dependency-check-report.html" ]; then
            echo "📋 HTML report size: $(du -h target/reports/dependency-check-report.html | cut -f1)"
          fi
        else
          echo "❌ No security reports found"
        fi
    
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: target/reports/
        retention-days: 30

  # Этап 4: Сборка Docker образа
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality-analysis, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/sauda-app:latest
          ghcr.io/${{ github.repository }}/sauda-app:${{ github.sha }}
          ghcr.io/${{ github.repository }}/sauda-app:${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Этап 5: Деплой в тестовую среду
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Image: ghcr.io/${{ github.repository }}/sauda-app:${{ github.sha }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        # Здесь будет реальная команда деплоя
        # Например: kubectl apply или docker-compose up
    
    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # Здесь будут тесты для проверки работоспособности

  # Этап 6: Деплой в продакшен (только после ручного подтверждения)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📦 Image: ghcr.io/${{ github.repository }}/sauda-app:${{ github.sha }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        # Здесь будет реальная команда деплоя в продакшен
    
    - name: 📊 Notify team
      run: |
        echo "📊 Notifying team about successful deployment..."
        # Здесь будет отправка уведомлений в Slack/Telegram
